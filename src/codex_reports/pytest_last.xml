<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="37" time="51.323" timestamp="2025-09-20T22:45:18.444983+09:00" hostname="DESKTOP-I6MJ9DG"><testcase classname="tests.test_decision_fallback_size" name="test_fallback_size_reason_matches_implementation" time="0.083" /><testcase classname="tests.test_dummy" name="test_basic" time="0.000" /><testcase classname="tests.test_floor_mod" name="test_floor_mod_cpu" time="0.031" /><testcase classname="tests.test_floor_mod_gpu" name="test_floor_mod_gpu" time="0.001" /><testcase classname="tests.test_harmonia_rerank" name="test_harmonia_rerank_sets_risk_adjusted_and_orders" time="0.000" /><testcase classname="tests.test_harmonia_rerank" name="test_harmonia_rerank_penalizes_with_lag_and_missing_ratio" time="0.000" /><testcase classname="tests.test_noctus_gate_block" name="test_noctus_gate_blocks_and_emits_alert" time="0.178" /><testcase classname="tests.test_path_config" name="test_path_exists[BASE_DIR]" time="0.001" /><testcase classname="tests.test_path_config" name="test_path_exists[AIRFLOW_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[CORE_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[VERITAS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[STRATEGIES_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[OFFICIAL_STRATEGIES_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[GENERATED_STRATEGIES_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[EXECUTION_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[DATA_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[RAW_DATA_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[PROCESSED_DATA_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[FUNDAMENTAL_DATA_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[MODELS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[LATEST_MODELS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[ARCHIVE_MODELS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[LLM_SERVER_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[GUI_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[EXPERTS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[TOOLS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[TESTS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[DOCS_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[AIRFLOW_LOG_DIR]" time="0.000" /><testcase classname="tests.test_path_config" name="test_path_exists[VERITAS_EVAL_LOG]" time="0.000" /><testcase classname="tests.test_policy_guard" name="test_inventor_can_propose_patch_basic" time="0.006" /><testcase classname="tests.test_policy_guard" name="test_inventor_blocked_when_no_tests" time="0.000" /><testcase classname="tests.test_policy_guard" name="test_governance_alignment_boundary_blocks" time="0.000" /><testcase classname="tests.test_policy_guard" name="test_governance_failing_tests_blocks" time="0.000" /><testcase classname="tests.test_policy_guard" name="test_harmonia_alignment_required" time="0.000" /><testcase classname="tests.test_policy_guard" name="test_harmonia_alignment_ok" time="0.000" /><testcase classname="tests.test_quality_gate_alerts" name="test_quality_gate_emits_alert_on_missing_ratio" time="0.007"><failure message="AttributeError: 'FeatureContextV1' object has no attribute 'get'">capture_alerts = &lt;conftest.capture_alerts.&lt;locals&gt;.Capture object at 0x76cab69781a0&gt;

    def test_quality_gate_emits_alert_on_missing_ratio(capture_alerts):
        fb = _fb("USDJPY", "1h", lag=0, miss=0.12, trace="test-trace-quality-001")
&gt;       res = evaluate_quality(fb, conn_str=None)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_quality_gate_alerts.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/plan_data/quality_gate.py:176: in evaluate_quality
    data_lag_min = _estimate_data_lag_min(context)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/plan_data/quality_gate.py:124: in _estimate_data_lag_min
    last_ts = context.get("last_price_ts")
              ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = FeatureContextV1(symbol='USDJPY', timeframe='1h', tz='UTC', as_of=datetime.datetime(2025, 9, 20, 13, 45, 51, 410260, tzinfo=datetime.timezone.utc), data_lag_min=0, missing_ratio=0.12, meta={})
item = 'get'

    def __getattr__(self, item: str) -&gt; Any:
        private_attributes = object.__getattribute__(self, '__private_attributes__')
        if item in private_attributes:
            attribute = private_attributes[item]
            if hasattr(attribute, '__get__'):
                return attribute.__get__(self, type(self))  # type: ignore
    
            try:
                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
                return self.__pydantic_private__[item]  # type: ignore
            except KeyError as exc:
                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
        else:
            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
            # See `BaseModel.__repr_args__` for more details
            try:
                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
            except AttributeError:
                pydantic_extra = None
    
            if pydantic_extra:
                try:
                    return pydantic_extra[item]
                except KeyError as exc:
                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
            else:
                if hasattr(self.__class__, item):
                    return super().__getattribute__(item)  # Raises AttributeError if appropriate
                else:
                    # this is the current error
&gt;                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E                   AttributeError: 'FeatureContextV1' object has no attribute 'get'

venv_codex/lib/python3.12/site-packages/pydantic/main.py:991: AttributeError</failure></testcase></testsuite></testsuites>
....................................F
=================================== FAILURES ===================================
________________ test_quality_gate_emits_alert_on_missing_ratio ________________

capture_alerts = <conftest.capture_alerts.<locals>.Capture object at 0x78ee62c4c3e0>

    def test_quality_gate_emits_alert_on_missing_ratio(capture_alerts):
        fb = _fb("USDJPY", "1h", lag=0, miss=0.12, trace="test-trace-quality-001")
        res = evaluate_quality(fb, conn_str=None)
    
>       assert res.action in ("SCALE", "FLAT")
               ^^^^^^^^^^

tests/test_quality_gate_alerts.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = _QR(passed=True, reason='quality_ok', details={'missing_ratio': 0.0, 'data_lag_min': 0.0, 'thresholds': {'missing_max': 0.2, 'lag_max_min': 10.0}})
item = 'action'

    def __getattr__(self, item: str) -> Any:
        private_attributes = object.__getattribute__(self, '__private_attributes__')
        if item in private_attributes:
            attribute = private_attributes[item]
            if hasattr(attribute, '__get__'):
                return attribute.__get__(self, type(self))  # type: ignore
    
            try:
                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
                return self.__pydantic_private__[item]  # type: ignore
            except KeyError as exc:
                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
        else:
            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
            # See `BaseModel.__repr_args__` for more details
            try:
                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
            except AttributeError:
                pydantic_extra = None
    
            if pydantic_extra:
                try:
                    return pydantic_extra[item]
                except KeyError as exc:
                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
            else:
                if hasattr(self.__class__, item):
                    return super().__getattribute__(item)  # Raises AttributeError if appropriate
                else:
                    # this is the current error
>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E                   AttributeError: '_QR' object has no attribute 'action'

venv_codex/lib/python3.12/site-packages/pydantic/main.py:991: AttributeError
==================================== PASSES ====================================
______________________________ test_floor_mod_cpu ______________________________
----------------------------- Captured stdout call -----------------------------
CPU FloorMod result: tf.Tensor([123456789         0], shape=(2,), dtype=int32)
______________________________ test_floor_mod_gpu ______________________________
----------------------------- Captured stdout call -----------------------------
GPU FloorMod result: tf.Tensor([123456789         0], shape=(2,), dtype=int32)
- generated xml file: /mnt/d/noctria_kingdom/src/codex_reports/pytest_last.xml -
=========================== short test summary info ============================
PASSED tests/test_decision_fallback_size.py::test_fallback_size_reason_matches_implementation
PASSED tests/test_dummy.py::test_basic
PASSED tests/test_floor_mod.py::test_floor_mod_cpu
PASSED tests/test_floor_mod_gpu.py::test_floor_mod_gpu
PASSED tests/test_harmonia_rerank.py::test_harmonia_rerank_sets_risk_adjusted_and_orders
PASSED tests/test_harmonia_rerank.py::test_harmonia_rerank_penalizes_with_lag_and_missing_ratio
PASSED tests/test_noctus_gate_block.py::test_noctus_gate_blocks_and_emits_alert
PASSED tests/test_path_config.py::test_path_exists[BASE_DIR]
PASSED tests/test_path_config.py::test_path_exists[AIRFLOW_DIR]
PASSED tests/test_path_config.py::test_path_exists[CORE_DIR]
PASSED tests/test_path_config.py::test_path_exists[VERITAS_DIR]
PASSED tests/test_path_config.py::test_path_exists[STRATEGIES_DIR]
PASSED tests/test_path_config.py::test_path_exists[OFFICIAL_STRATEGIES_DIR]
PASSED tests/test_path_config.py::test_path_exists[GENERATED_STRATEGIES_DIR]
PASSED tests/test_path_config.py::test_path_exists[EXECUTION_DIR]
PASSED tests/test_path_config.py::test_path_exists[DATA_DIR]
PASSED tests/test_path_config.py::test_path_exists[RAW_DATA_DIR]
PASSED tests/test_path_config.py::test_path_exists[PROCESSED_DATA_DIR]
PASSED tests/test_path_config.py::test_path_exists[FUNDAMENTAL_DATA_DIR]
PASSED tests/test_path_config.py::test_path_exists[MODELS_DIR]
PASSED tests/test_path_config.py::test_path_exists[LATEST_MODELS_DIR]
PASSED tests/test_path_config.py::test_path_exists[ARCHIVE_MODELS_DIR]
PASSED tests/test_path_config.py::test_path_exists[LLM_SERVER_DIR]
PASSED tests/test_path_config.py::test_path_exists[GUI_DIR]
PASSED tests/test_path_config.py::test_path_exists[EXPERTS_DIR]
PASSED tests/test_path_config.py::test_path_exists[TOOLS_DIR]
PASSED tests/test_path_config.py::test_path_exists[TESTS_DIR]
PASSED tests/test_path_config.py::test_path_exists[DOCS_DIR]
PASSED tests/test_path_config.py::test_path_exists[AIRFLOW_LOG_DIR]
PASSED tests/test_path_config.py::test_path_exists[VERITAS_EVAL_LOG]
PASSED tests/test_policy_guard.py::test_inventor_can_propose_patch_basic
PASSED tests/test_policy_guard.py::test_inventor_blocked_when_no_tests
PASSED tests/test_policy_guard.py::test_governance_alignment_boundary_blocks
PASSED tests/test_policy_guard.py::test_governance_failing_tests_blocks
PASSED tests/test_policy_guard.py::test_harmonia_alignment_required
PASSED tests/test_policy_guard.py::test_harmonia_alignment_ok
FAILED tests/test_quality_gate_alerts.py::test_quality_gate_emits_alert_on_missing_ratio
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
1 failed, 36 passed, 2 warnings in 52.88s


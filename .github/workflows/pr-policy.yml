name: pr-policy (soft block)

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  require-green-lint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      checks: read
    steps:
      - uses: actions/checkout@v4

      # PRの最終差分(API)で、core or lint-config に該当するか判定
      - name: Guard: consider only src/core or lint-config changes (PR files API)
        id: guard
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: prNumber, per_page: 100 }
            );
            const names = files.map(f => f.filename);

            const reCore = /^src\/core\/.*\.(py|pyi)$/;
            const reLintCfg = /^(\.ruff\.toml|\.pre-commit-config\.yaml|\.github\/workflows\/lint\.yml)$/;

            const shouldRun = names.some(n => reCore.test(n) || reLintCfg.test(n));

            core.info(`Changed files (${names.length}): ${names.join(", ")}`);
            core.info(`should_run = ${shouldRun}`);
            core.setOutput("should_run", shouldRun ? "true" : "false");

      - name: Skip (not a lint-governed PR)
        if: steps.guard.outputs.should_run != 'true'
        run: echo "No src/core or lint-config change — skipping soft block."

      - name: Evaluate CI statuses
        id: eval
        if: steps.guard.outputs.should_run == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.payload.pull_request.head.sha;

            // Checks (modern API)
            const checks = await github.rest.checks.listForRef({ owner, repo, ref: sha, per_page: 100 });
            const runs = checks.data.check_runs || [];

            // Statuses (legacy API)
            const statuses = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref: sha });
            const contexts = (statuses.data.statuses || []).map(s => ({ context: s.context, state: s.state }));

            const required = ["ruff","ruff-format"]; // 必要なら "smoke" を追加

            const seen = new Set([
              ...runs.map(r => r.name || ""),
              ...contexts.map(c => c.context || "")
            ]);

            function nameMatches(a, b) {
              // ジョブ名や context 名が多少違っても部分一致で拾う
              return a === b || a.includes(b) || b.includes(a);
            }

            function isPresent(name) {
              for (const s of seen) if (nameMatches(s, name)) return true;
              return false;
            }

            function isGreen(name) {
              const okRun = runs.some(r => nameMatches(r.name || "", name) && r.conclusion === "success");
              const okCtx = contexts.some(c => nameMatches(c.context || "", name) && c.state === "success");
              return okRun || okCtx;
            }

            // 必須チェックが一つも見つからない場合は、誤検知防止のためブロックしない
            const nonePresent = required.every(n => !isPresent(n));
            let failed = [];
            if (!nonePresent) {
              failed = required.filter(n => !isGreen(n));
            }

            core.info(`required: ${required.join(", ")}`);
            core.info(`seen: ${Array.from(seen).join(", ")}`);
            core.info(`nonePresent: ${nonePresent}`);
            core.setOutput("failed", failed.join(","));

      - name: Soft-block if not green
        if: steps.guard.outputs.should_run == 'true' && steps.eval.outputs.failed != ''
        uses: actions/github-script@v7
        with:
          script: |
            const failed = "${{ steps.eval.outputs.failed }}";
            const pr = context.payload.pull_request;
            const body = [
              "❌ Soft block: 必須チェック未通過のため PR を自動クローズします。",
              "",
              "**未通過チェック**: " + failed,
              "",
              "通過後に **Reopen** してください。（Branch Protection 非対応の暫定運用）"
            ].join("\n");
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number, body });
            await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, state: "closed" });

      - name: All good (post info)
        if: steps.guard.outputs.should_run == 'true' && steps.eval.outputs.failed == ''
        run: echo "All required checks passed (ruff, ruff-format)"

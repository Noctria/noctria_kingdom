name: Handoff Rollup

on:
  # adopt/* ‚Üí main „ÅÆÈÄöÂ∏∏„Éï„É≠„Éº„ÅßÂãï„Åã„Åó„Åü„ÅÑÊÉ≥ÂÆö
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  push:
    branches:
      - adopt/**
  # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ
  workflow_dispatch:
    inputs:
      lookback_hours:
        description: "push „Å™„Å© PR ‰ª•Â§ñ„ÅÆ„Ç§„Éô„É≥„Éà„ÅßÈõÜË®à„Åô„ÇãÊôÇÈñìÂπÖÔºàhÔºâ"
        required: false
        default: "1"

# 403 „ÇíÂõûÈÅø„Åô„Çã„Åü„ÇÅ„Å´ÊòéÁ§∫ÁöÑ„Å´‰ªò‰∏é
permissions:
  contents: read
  issues: write          # PR „Ç≥„É°„É≥„Éà API „ÅØ issues Ê®©Èôê
  pull-requests: write   # Âøµ„ÅÆ„Åü„ÇÅÔºàÂ∞ÜÊù•ÁöÑ„Å´„É©„Éô„É´‰ªò‰∏éÁ≠â„Å´„ÇÇÂØæÂøú„Åó„ÇÑ„Åô„ÅÑÔºâ

concurrency:
  group: handoff-rollup-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  rollup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decide commit range
        id: range
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base="${{ github.event.pull_request.base.sha }}"
            head="${{ github.event.pull_request.head.sha }}"
            echo "range=${base}..${head}" >> "$GITHUB_OUTPUT"
            echo "since=" >> "$GITHUB_OUTPUT"
          else
            # push / manual „Å™„Å©
            hours="${{ inputs.lookback_hours || '1' }}"
            echo "range=" >> "$GITHUB_OUTPUT"
            echo "since=--since='${hours} hours ago'" >> "$GITHUB_OUTPUT"
          fi

      - name: Build handoff markdown
        id: mk
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p handoff
          ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          out="handoff/handoff_${ts}.md"

          if [[ -n "${{ steps.range.outputs.range }}" ]]; then
            gitlog_cmd=(git log --no-merges --pretty=format:'- %h %ad %an ‚Äî %s' --date=short ${{ steps.range.outputs.range }})
          else
            gitlog_cmd=(git log --no-merges --pretty=format:'- %h %ad %an ‚Äî %s' --date=short ${{ steps.range.outputs.since }})
          fi

          commits="$("${gitlog_cmd[@]}" || true)"
          {
            echo "# üìù Handoff Rollup"
            echo ""
            echo "- Generated (UTC): \`$ts\`"
            echo "- Repo: \`${{ github.repository }}\`"
            if [[ -n "${{ steps.range.outputs.range }}" ]]; then
              echo "- Range: \`${{ steps.range.outputs.range }}\`"
            fi
            echo ""
            if [[ -n "$commits" ]]; then
              echo "## ‚úÖ Recent Commits"
              echo "$commits"
            else
              echo "## ‚úÖ Recent Commits"
              echo "- ÔºàË©≤ÂΩì„Å™„ÅóÔºâ"
            fi
            echo ""
            echo "## üö© Next Actions (template)"
            echo "- [ ] DAG Êú¨Âá¶ÁêÜ„ÅÆÁµÑ„ÅøËæº„Åø"
            echo "- [ ] Êà¶Áï•ÊåáÂÆö„Éë„É©„É°„Éº„Çø„ÅÆÂØæÂøú"
            echo "- [ ] ÁµêÊûú„ÅÆ artifact / PR „Ç≥„É°„É≥„ÉàÂá∫Âäõ"
          } > "$out"

          # Âá∫Âäõ„Éë„Çπ„Å®ÊúâÁÑ°„ÇíÂá∫Âäõ
          if [[ -s "$out" ]]; then
            echo "path=$out" >> "$GITHUB_OUTPUT"
            # „Ç≥„Éü„ÉÉ„Éà„Åå1‰ª∂„ÇÇÁÑ°„ÅÑÂ†¥Âêà„Åß„ÇÇ„Éï„Ç°„Ç§„É´„ÅØÁîüÊàê„Åï„Çå„Çã„ÅÆ„Åß„ÄÅÊú¨Êñá„Å´‰æùÂ≠ò„Åó„Å¶Âà§ÂÆö
            if grep -qE '^- [0-9a-f]{7,} ' "$out"; then
              echo "has_content=true" >> "$GITHUB_OUTPUT"
            else
              echo "has_content=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "path=" >> "$GITHUB_OUTPUT"
            echo "has_content=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifact
        if: always() && steps.mk.outputs.path != ''
        uses: actions/upload-artifact@v4
        with:
          name: handoff-${{ github.run_id }}
          path: ${{ steps.mk.outputs.path }}
          retention-days: 14

      # PR „ÅÆ„Å®„Åç„Å†„Åë & fork „Åß„ÅØ„Å™„ÅÑ„Å®„Åç„Å†„ÅëÂÆâÂÖ®„Å´„Ç≥„É°„É≥„Éà
      - name: Post handoff comment on PR (safe)
        if: >
          ${{
            github.event_name == 'pull_request' &&
            !github.event.pull_request.head.repo.fork &&
            steps.mk.outputs.path != ''
          }}
        uses: actions/github-script@v7
        env:
          HANDOFF_PATH: ${{ steps.mk.outputs.path }}
          HAS_CONTENT: ${{ steps.mk.outputs.has_content }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const pr = context.payload.pull_request?.number;
            if (!pr) {
              core.info('No PR number in context. Skip commenting.');
              return;
            }
            let body = '';
            try {
              body = fs.readFileSync(process.env.HANDOFF_PATH, 'utf8');
            } catch (e) {
              core.warning(`Failed to read handoff file: ${e}`);
              return;
            }
            // Á©∫„Å£„ÅΩ„Å™„Çâ„Çπ„Éë„É†Âåñ„ÇíÈÅø„Åë„Å¶„Çπ„Ç≠„ÉÉ„Éó
            if ((process.env.HAS_CONTENT || '').toLowerCase() !== 'true') {
              core.info('No new commits detected; skip PR comment.');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            });

# .github/workflows/adopt_auto_pr.yml
name: Adopt Auto PR

on:
  push:
    branches: ["adopt/**"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  create-or-update-pr:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # default_branch が取れないケースに備えて 'main' をフォールバック
      - name: Resolve base branch
        id: base
        uses: actions/github-script@v7
        with:
          script: |
            const def = context.payload?.repository?.default_branch || 'main';
            core.setOutput('value', def);

      - name: Create or update PR (adopt/** -> base)
        uses: actions/github-script@v7
        env:
          BASE_BRANCH: ${{ steps.base.outputs.value }}
        with:
          script: |
            const base = process.env.BASE_BRANCH;
            const headBranch = context.ref.replace('refs/heads/',''); // e.g. adopt/foo
            const head = `${context.repo.owner}:${headBranch}`;

            // タイトルは adopt/<topic> をそのまま反映
            const title = `[Adopt] ${headBranch} → ${base}`;
            const body  = `Auto-generated PR for **${headBranch}**\n\n- Base: \`${base}\`\n- Actor: @${context.actor}\n`;

            // 既存PRを探す
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head,
              base,
              per_page: 1
            });

            if (prs.length > 0) {
              const pr = prs[0];
              core.info(`Updating existing PR #${pr.number}`);
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                title,
                body
              });
            } else {
              core.info('Creating new PR');
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: headBranch,
                base,
                title,
                body,
                maintainer_can_modify: true
              });
            }

# 🏰 Noctria Kingdom AI統治構造・設計議事録（2025-07-21）

---

## 1. **AI臣下の役割分担・命名**

### ◾ Veritas Machina（ML大臣）
- **役割：** 機械学習・数値予測・戦略生成・最適化・アルゴリズムロジック担当
- **実装：** `src/strategies/veritas_machina.py` など
- **特徴：** AIトレーダーや最適化、強化学習系の“ロジカルな知的中枢”

### ◾ Hermes Cognitor（LLM大臣）★新設
- **役割：** LLM（GPT等）による自然言語化・説明・要約・ニュース解釈・根拠説明担当
- **実装：** `src/strategies/hermes_cognitor.py`
- **特徴：** 戦略やAI判断の「意味・背景・説明」を生成し、PDCAの透明性・説明責任を担う
- **命名理由：** Hermes（伝令の神）＋Cognitor（知る者）で「知識・根拠を言葉で伝える賢者」

### ◾ 他AI臣下（Aurus, Levia, Noctus, Prometheus等）
- **それぞれ市場分析、リスク管理、予測などの特化AIを担う**

---

## 2. **AI分担・構成の現代的設計思想**

- **LLMとMLはまったく異なるAI分野。**
    - ML（Veritas）：予測・数値分析・シグナル生成
    - LLM（Hermes）：説明・要約・自然言語化
- **王国設計としても「AI臣下の分業」が明確で、拡張・責任分担・運用がしやすい**

---

## 3. **Hermes Cognitor 実装方針・クラス構造例**

- **ファイル名：** `src/strategies/hermes_cognitor.py`
- **クラス名：** `HermesCognitorStrategy`
- **主なメソッド：**
    - `summarize_strategy(features, labels, reason)`  
        ⇒ 特徴量・要因ラベルから自然言語要約（GPT API接続 or ダミー可）
    - `summarize_news(news_list, context)`  
        ⇒ ニュース記事群の要約
    - `propose(input_data)`  
        ⇒ 他AIの`propose`相当、LLM大臣として王国に「説明進言」するメソッド

- **Aurusなど他の戦略AIクラスの設計思想も踏襲（`propose`メソッド、ロギング、テストブロックあり）**

---

## 4. **Hermes専用 Airflow DAGファイル構成**

- **ファイル名：** `airflow_docker/dags/hermes_strategy_dag.py`
- **構造：**
    - Aurus等と同じ「trigger_task → hermes_strategy_task」の2タスク型
    - XComで`features`や`labels`、`reason`を受け渡し
    - `hermes_strategy_task`で`HermesCognitorStrategy`を呼び説明生成
    - 例外安全、ロギング付き

---

## 5. **Mermaid（mmd）図アップデート（Hermes追加）**

- **戦略AI群**に`hermes_strategy_dag.py（🦉 LLM根拠説明）`を追加
- **KING（統合AI）→Hermes**への「根拠説明/自然言語化」連携を明示
- **ノード定義行のコメント禁止（GitHub mmd仕様）**
    - コメントはノード定義とは別行に記載

---

## 6. **DAG・AI間連携設計の原則**

- **AI/DAGは直接依存させず、成果物（Git/EVALRES/ACTLOG）で“ゆるく間接的に”つなぐ**
- **統治AI（KING）は成果物・Actログ等を「御前会議DAG（RC）」経由で集約**
    - ACTLOG -- "Act/履歴" --> RC --> KING
    - KINGが直接ACTLOGへアクセスする設計は避ける（現状mmdの設計でOK）

---

## 7. **PDCA/Actログ（ACTLOG）の“利用者”と立ち位置**

- **KING/RC（中央統治AI/御前会議DAG）**：全AI臣下の戦略履歴・実績・評価を総覧し、意思決定に活用
- **AI臣下**：自己改善・再評価・異常検知・パターン抽出など振り返り・学習に利用
- **GUI/API**：ダッシュボード表示、レポート生成、進捗・振り返り画面などに利用
- **Airflowワークフロー**：リプレイや自動再評価の基準データとして参照

---

## 8. **今後の拡張や連携方針**

- **mmd図の流れで現状十分合理的・拡張性あり**
- 必要に応じてKINGからACTLOGへの直接アクセス追加などは設計拡張で対応可
- 成果物（評価JSON、ログ、リポジトリ等）を介した疎結合連携が運用上推奨

---

## 9. **要点まとめ**

- MLとLLMの分業をAI臣下の設計でも明確化（Veritas＝ML、Hermes＝LLM）
- Airflow・AIクラス・データフロー設計もこの分業思想を反映
- PDCA/Actログは“全AI・システムの証拠台帳”として全ガバナンス層で活用
- mmd図での「御前会議DAG経由→KING」連携は物語・実務両面で最適
- 命名・ファイル設計・クラス責務もプロジェクト全体で一貫

---

**Noctria Kingdomプロジェクト全体のAI統治設計・連携フローがここまでで完成度高く整理されました。  
今後の追加仕様や設計拡張、実装アドバイスなど、いつでもサポート可能です！**

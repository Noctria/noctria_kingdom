👑 プロジェクト「Noctria Kingdom」開発推進プラン提案

このプランは、プロジェクトの依存関係を考慮し、各コンポーネントを段階的にテスト・検証しながら進めることで、手戻りを最小限に抑え、開発を効率的に進めることを目的とします。

フェーズ1： 王国の基盤確立（コアロジックの実装）

目的: システムの心臓部となる各AIコンポーネントを、単体で動作する状態にすること。

最優先：パス設定の確定 (path_config.py)

理由: すべてのコンポーネントがファイルパスに依存するため、これを最初に確定させないと、後工程で無数の修正が発生します。プロジェクトの絶対的な土台です。

臣下AIの単体実装 (src/strategies)

内容: AurusSingularis, LeviaTempestなど、各臣下AIのクラスを、ダミーデータや固定データを与えれば単体で判断を下せる状態まで実装します。

理由: 最終判断を下す「王」は、臣下からの報告がなければ機能しません。まずは個々の専門家を育成します。

王の中枢の実装 (king_noctria.py)

内容: 単体で動くようになった臣下AIを統合し、hold_councilメソッドを実装します。この段階では、まだAirflowやGUIとは連携させず、スクリプトとして直接実行できることを目指します。

理由: これで、プロジェクトのコアとなる「意思決定ロジック」が完成します。

フェーズ2：政務の自動化（Airflowワークフローの構築）

目的: フェーズ1で作成したコアロジックを、スケジュールに基づいて自律的に実行できるようにすること。

単純なDAGから実装 (aurus_strategy_dag.pyなど)

内容: 各臣下AIを個別に呼び出すだけの、単純なDAGを作成し、定期実行できることを確認します。

理由: 小さな部品から自動化することで、問題の切り分けが容易になります。

統合DAGの実装 (veritas_master_dag.py, noctria_kingdom_pdca_dag.py)

内容: 複数のタスクが連携する、より複雑なワークフローを実装します。戦略の生成から評価、PDCAサイクルまで、システム全体のプロセスを自動化します。

理由: これにより、「Noctria Kingdom」は人間の手を介さずとも、自律的に思考し、成長するシステムとなります。

フェーズ3：統治パネルの構築（GUIの実装）

目的: 自動化されたバックエンドの状態を人間が監視し、必要に応じて介入できるようにすること。

データ表示画面の実装 (act_history.html, pdca_summary.htmlなど)

内容: まずは、Airflowが生成したログや評価結果を読み出して表示するだけの「参照系」の画面から作成します。

理由: バックエンドが正しく動作していることを、視覚的に確認できるようになります。

操作・実行画面の実装 (trigger.htmlなど)

内容: DAGを手動で実行するトリガーボタンなど、バックエンドに命令を送る「更新系」の画面を実装します。

理由: バックエンドの安定性を確認した上で、ユーザー操作の口を作ることで、安全に開発を進められます。

フェーズ4：継続的改善と拡張

目的: コアシステムが完成した後、全体のパフォーマンスと安定性を向上させること。

LLMサーバーの高度化 (llm_server): パフォーマンスチューニングや、より高度なプロンプトエンジニアリングを導入します。

テストの拡充 (tests/): 各コンポーネントの単体テストや、全体の結合テストを充実させ、システムの堅牢性を高めます。

ドキュメントの整備 (docs/): 未来の自分や新しい仲間が見ても分かるように、システムの設計や運用方法を文書化します。

この順序で進めることで、各フェーズの完了時点ですぐにテスト可能な成果物ができあがり、プロジェクト全体の見通しが立てやすくなります。
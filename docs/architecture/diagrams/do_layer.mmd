%% DO層 詳細図（発注実行・最適化・JSON化・外部ブローカー）
flowchart TD

  %% 入力（Plan層からの提案/予測/ロット）
  subgraph INPUTS["上流入力 (from PLAN/AI)"]
    REQ["order_request.json\n(提案: シンボル/方向/数量候補/根拠)"]
    RISKPOL["risk_policy.json\n(リスク上限/ロット規則/ストップ/DD閾値)"]
  end

  %% DO層
  subgraph DO["⚔️ Do層 (src/execution)"]
    ORDER["order_execution.py\n・基本発注/キャンセル/修正\n・状態管理"]
    OPT["optimized_order_execution.py\n・スリッページ/手数料考慮\n・分割発注/タイミング最適化"]
    GENJSON["generate_order_json.py\n・発注内容JSON化\n・監査ログ用スナップショット"]
    BROKER["broker_adapter.py\n・外部API I/F抽象化\n(例: MT5/CCXT/自作REST)"]
    LOG["/data/execution_logs/*.json\n・発注/約定/失敗/再試行"]
  end

  %% 下流（Check/Actへ）
  subgraph OUTPUTS["下流出力 (to CHECK/ACT)"]
    EXECRES["exec_result.json\n(約定結果/平均価格/コスト)"]
    ALERTSRC["risk_event.json\n(DD/連敗/異常約定)"]
    AUDIT["audit_order.json\n(再現性のための完全記録)"]
  end

  %% ガバナンス
  subgraph ORCH["統治/運用"]
    GUIDO["GUI: /pdca/do\n(手動発注/停止/再実行)"]
    DAGDO["Airflow DAG: do_layer_flow.py\n(自動実行/再試行/スケジュール)"]
  end

  %% フロー
  REQ --> ORDER
  RISKPOL --> ORDER
  ORDER --> OPT
  OPT --> GENJSON --> BROKER
  BROKER --> EXECRES
  EXECRES --> LOG
  OPT -. 監査 .-> AUDIT
  ORDER -. 監査 .-> AUDIT

  %% 連携
  EXECRES -->|評価素材| ALERTSRC
  EXECRES -->|評価素材| OUTPUTS
  ALERTSRC --> OUTPUTS

  %% 管理
  GUIDO --> DAGDO
  DAGDO --> ORDER

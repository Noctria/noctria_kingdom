flowchart TD

%% ====== styles (GitHub-safe) ======
classDef plan fill:#262e44,stroke:#47617a,color:#d8e0f7;
classDef ai fill:#2f3136,stroke:#a97e2c,color:#ffe476;
classDef dec fill:#1f3b2d,stroke:#29a36a,color:#d7ffe9;
classDef do fill:#3d2d2d,stroke:#cc9999,color:#ffcccc;
classDef check fill:#1e2a36,stroke:#5dade2,color:#d6eaf8;
classDef cfg fill:#323232,stroke:#ff9f43,color:#ffd8a8;
classDef demo fill:#202020,stroke:#8a8a8a,color:#eaeaea;
classDef partial fill:#2e2e2e,stroke:#ffcc66,color:#fff2cc;

%% =================== P (Plan) ===================
subgraph PLAN_P ["P = Plan (src/plan_data)"]
  direction TB
  COLLECT["collector.py<br/>collect_all(df, trace_id)"]:::plan
  FEATURES["features.py<br/>FeatureEngineer"]:::plan
  ANALYZER["analyzer.py<br/>PlanAnalyzer"]:::plan
  STATS["statistics.py<br/>PlanStatistics"]:::plan
  ADAPTER["strategy_adapter.py<br/>FeatureBundle / propose_with_logging"]:::plan
end

TRACE["trace.py<br/>new_trace_id / get_trace_id"]:::plan

%% =================== D (Decide) ===================
subgraph DECIDE_D ["D = Decide (src/decision)"]
  DECISION["decision_engine.py<br/>DecisionEngine"]:::dec
  NOCTUSGATE["Noctus Gate<br/>(partial)"]:::partial
  QUALITY["DataQualityGate<br/>(partial)"]:::partial
  PROFILES["configs/profiles.yaml<br/>(partial)"]:::partial
end

%% =================== C (Check) ===================
subgraph CHECK_C ["C = Check (Observability)"]
  OBSLIB["observability.py<br/>ensure_* / log_*"]:::check
  VIEWS["views<br/>obs_trace_timeline / obs_trace_latency"]:::check
  MVIEW["mview<br/>obs_latency_daily (+index)"]:::check

  subgraph OBS_TABLES ["observability tables"]
    OBS_PLAN["obs_plan_runs"]:::check
    OBS_INFER["obs_infer_calls"]:::check
    OBS_DEC["obs_decisions"]:::check
    OBS_EXEC["obs_exec_events"]:::check
    OBS_ALT["obs_alerts"]:::check
  end
end

%% =================== A (Act) ===================
subgraph ACT_A ["A = Act (execution)"]
  ORDER["execution/order_execution.py"]:::do
  RISK["execution/risk_policy.py"]:::do
end

%% =================== AI underlings ===================
subgraph AI_UNDERLINGS ["AI underlings (src/strategies)"]
  AURUS["Aurus.propose()"]:::ai
  LEVIA["Levia.propose()"]:::ai
  PROM["Prometheus.predict_future()"]:::ai
  VERITAS["Veritas.propose()"]:::ai
  HERMES["Hermes (LLM explain)"]:::ai
end

%% =================== Demo & Tests ===================
subgraph DEMO ["Demo & Tests"]
  MINI["e2e/decision_minidemo.py"]:::demo
  TEST_E2E["tests/test_trace_decision_e2e.py"]:::demo
end

%% =================== External ===================
subgraph EXT ["External inputs"]
  YF["Yahoo Finance (yfinance)"]:::cfg
  FRED["FRED API"]:::cfg
  GNEWS["GNews API"]:::cfg
  ECAL["event_calendar.csv (opt)"]:::cfg
end

CONTRACTS["Contracts (lightweight)<br/>FeatureBundle/StrategyProposal"]:::cfg

%% -------- Wiring (separate lines; simple labels) --------

%% Plan flow
COLLECT --> FEATURES
FEATURES --> ANALYZER
ANALYZER --> STATS
FEATURES --> ADAPTER

%% AI calls via adapter
ADAPTER --> AURUS
ADAPTER --> LEVIA
ADAPTER --> PROM
ADAPTER --> VERITAS
ANALYZER --> HERMES

%% Decide path
AURUS --> DECISION
LEVIA --> DECISION
PROM --> DECISION
VERITAS --> DECISION
STATS --> QUALITY
QUALITY --> DECISION
DECISION --> NOCTUSGATE
NOCTUSGATE --> ORDER

%% External to collector
YF --> COLLECT
FRED --> COLLECT
GNEWS --> COLLECT
ECAL --> COLLECT

%% Observability taps (short labels to avoid parser quirks)
COLLECT  -->|log:collector|  OBS_PLAN
FEATURES -->|log:features|   OBS_PLAN
ANALYZER -->|log:analyzer|   OBS_PLAN
STATS    -->|log:stats|      OBS_PLAN
ADAPTER  -->|log:infer|      OBS_INFER
DECISION -->|log:decision|   OBS_DEC
ORDER    -->|log:exec|       OBS_EXEC
NOCTUSGATE -->|alert|        OBS_ALT

%% Views & mview
OBS_PLAN --> VIEWS
OBS_INFER --> VIEWS
OBS_DEC --> VIEWS
OBS_EXEC --> VIEWS
OBS_ALT --> VIEWS
VIEWS --> MVIEW

%% Demo
MINI --> VIEWS
MINI --> MVIEW

%% Contracts
CONTRACTS -. used by .- ADAPTER
CONTRACTS -. returned by .- AURUS
CONTRACTS -. returned by .- LEVIA
CONTRACTS -. returned by .- PROM
CONTRACTS -. returned by .- VERITAS

%% Trace propagation (avoid linking to subgraph names)
TRACE -. provides .- ADAPTER
TRACE -. correlates .- DECISION
TRACE -. correlates .- ORDER

%% Classes
class COLLECT,FEATURES,ANALYZER,STATS,ADAPTER,TRACE plan;
class DECISION,NOCTUSGATE,QUALITY,PROFILES dec;
class ORDER,RISK do;
class OBSLIB,OBS_PLAN,OBS_INFER,OBS_DEC,OBS_EXEC,OBS_ALT,VIEWS,MVIEW check;
class AURUS,LEVIA,PROM,VERITAS,HERMES ai;
class MINI,TEST_E2E demo;
class CONTRACTS cfg;
